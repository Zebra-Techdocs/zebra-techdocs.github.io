
The KeyMappingMgr allows an app to modify the behavior of one or more physical (or capacitive) Keys when such Keys are pressed (or touched). It does so by remapping the keycode value delivered by the Key to one that performs the desired behavior. 

####Requirements

* KeyMappingMgr is **supported only on the following devices**:
	* **MC92**
	* **MC67**
	* **MC40**
	* **MC18**
	* **TC51**
	* **TC56**
	* **TC70x**
	* **TC75x**
	* **TC8000**
	* **VC80x**
	* **WT6000**
* **Device must be running Android 4.4 KitKat or later**
* **Device must contain MX 4.4 or higher**

For key-mapping options on Android devices not listed above, please see the [Enterprise Keyboard User Guide](../../enterprise-keyboard/1-0/guide/about). 

* KeyMappingMgr is **NOT supported on the following devices**:
	* Any device not listed above, including:
	* TC75
	* TC70
	* TC55
	* MC36

For TC55 key-mapping options, see the [Scan Mode Manager](../../../../mx/scanmodemgr) (not supported by EMDK). 

### Main Functionality

* Remap one or more device Keys to:
	* Behave like a different Key
	* Execute a predefined trigger (i.e. scan a barcode)
	* Launch an application 
	* Send an Intent
	* Do nothing
* Reset all Key mappings to factory default values

Key Mapping is a capability offered on particular Zebra Android devices only. It allows keypress behavior to be defined for specific Key(s) or when a Key is in a given Key State. The Current Key State for a Key at any given time is determined by one or more Key State Modifiers that may have been applied as the result of presses of Modifier Keys. For example, a device with a Blue Key might set or clear the Blue-Key State Modifier in the Current Key State each time the Blue Key is pressed. Some Zebra devices support multiple Key State Modifiers to set the Current Key State; others do not.

The Key Behavior desired for a particular keypress in a particular Key State is defined by a Key Mapping in the Key Mapping Table. There are Key Mapping Tables associated with specific Key State Modifiers that can be set within the Current Key State. A Key Mapping for a Key that is defined in a given Key Mapping Table will be used only when the Key is pressed while the Key Modifier associated with that Key Mapping Table is set in the Current Key State. For example, when a Key is pressed while the Blue Key State Modifier is set in the Current Key State, the Blue Key Mapping Table would be searched to find a Key Mapping for that keypress. 

Every device has a series of Default Key Mappings that are pre-installed in the Key Mapping Tables supported by that device. These Default Key Mappings define the default Key Behaviors for that device. To change the Default Key Behaviors for a device, new Key Mappings--called Override Key Mappings--can be added to one or more Key Mapping Tables. When a Mapping Table contains a Default Key Mapping and an Override Key Mapping for the same Key, the Override Key Mapping will be used. To revert to Default Key Behaviors, the Override Key Mappings can be removed, thereby restoring use of the Default Key Mappings. Default Key Mappings cannot be modified or removed, only overridden.

###Key Mapping Table Searches 
Key processing begins by checking the Current Key State at the time the Key was pressed. If multiple Key State Modifiers are set in the Current Key State, the Key Mapping Tables associated with those Key State Modifiers are searched in a fixed priority order based on their associated Key State Modifiers. If a Key Mapping for the pressed Key is found at any time during a search, searching stops and the found Key Mapping will be used to determine the Key Behavior to be performed for the pressed Key.

If all Key Mapping Tables associated with Key State Modifiers are searched without finding a Key Mapping for the pressed Key, the Base Key State Key Mapping Table is searched. If no Key Mapping for the pressed Key can be found, the default Android Key Behavior will be performed for the pressed Key. This will seldom be the case since most devices will have Default Key Mappings for all Keys defined in the Base Key State Mapping Table.

Not all devices support all Key State Modifiers, and hence not all devices will support all Key Mapping Tables. Some devices support multiple Key State Modifiers, and each device will support the Key Mapping Tables associated with all the Key State Modifiers that it supports. All devices support at least the Base Key State Key Mapping Table, even if they support no other Key Mapping Tables. The following Key State Modifiers and associated Key Mapping Tables may be supported by various devices. These Key Mapping Tables will be searched (when supported on a given device) in the order listed below, based on the Key State Modifiers that are set in the Current Key State.

>**On Android, modifier keys are referred to as Meta keys**. 

#### Key Table Search Order
1. Blue-Key State Modifier and Blue-Key Mapping Table

	This Key Mapping Table is searched when the Blue Key State Modifier is set in the Current Key State at the time a Key is pressed. If a Key Mapping for the pressed Key is found, then that Key Mapping is used to determine the Key Behavior to be performed for the pressed Key. If no Key Mapping for the pressed Key is found, then searching continues with another Key Mapping Table.
	
2. Orange-Key State Modifier and Orange-Key Mapping Table

	This Key Mapping Table is searched when the Orange Key State Modifier is set in the Current Key State at the time a Key is pressed. If a Key Mapping for the pressed Key is found, then that Key Mapping is used to determine the Key Behavior to be performed for the pressed Key. If no Key Mapping for the pressed Key is found, then searching continues with another Key Mapping Table.
	
3. Grey-Key State Modifier and Grey-Key Mapping Table

	This Key Mapping Table is searched when the Grey Key State Modifier is set in the Current Key State at the time a Key is pressed. If a Key Mapping for the pressed Key is found, then that Key Mapping is used to determine the Key Behavior to be performed for the pressed Key. If no Key Mapping for the pressed Key is found, then searching continues with another Key Mapping Table.

4. Control-Key State Modifier and Control-Key Mapping Table

	This Key Mapping Table is searched when the Control Key State Modifier is set in the Current Key State at the time a Key is pressed. If a Key Mapping for the pressed Key is found, then that Key Mapping is used to determine the Key Behavior to be performed for the pressed Key. If no Key Mapping for the pressed Key is found, then searching continues with another Key Mapping Table.

5. Shift-Key State Modifier and Shift-Key Mapping Table

	This Key Mapping Table is searched when the Shift Key State Modifier is set in the Current Key State at the time a Key is pressed. If a Key Mapping for the pressed Key is found, then that Key Mapping is used to determine the Key Behavior to be performed for the pressed Key. If no Key Mapping for the pressed Key is found, then searching continues with another Key Mapping Table.

6. Base-Key State Key Mapping Table
	
	The Base Key State Key Mapping Table is searched if no Key State Modifiers are set in the Current Key State (i.e. default Key State) at the time a Key is pressed. This Key Mapping is also searched if all Key Mapping Tables were searched based on the Key State Modifiers that were set in the Current Key State and no Key Mapping for the pressed Key was found (i.e. fall through). If the Base Key State Key Mapping Table is searched and no Key Mapping for the pressed Key is found, then the standard Android Key Action for the pressed Key will be performed.

#### Key Identifiers
Each Key Mapping in each Key Mapping Table defines a specific Key Behavior to be performed for a pressed Key when that Key Mapping Table is determined to be the most applicable one for that Key press. Every Key Mapping requires a specific Key to be identified. A Key is identified in Key Mapping Using a Key Identifier. Key Identifiers are constructed generally according to the rules below.

* **Text-Labeled Keys**

	For a Key that is physically labeled with text, that label is used to identify the Key. For example, a Key that is physically labeled with the letter "A" would be identified as the "A" Key. In some cases, a Key might be physically labeled with an abbreviated text legend. For example, a Key that is physically labeled "BKSP" would be identified as "BACKSPACE" by the text description. 

* **Graphically Labeled Keys**

	For a Key that is physically labeled with a picture or icon or other graphical legend, a textual description of that graphical legend is used to identify the Key. For example, a Key with an icon of a house would be identified as "HOME" by the text description.
	
* **Color-Labeled Keys**

	For a Key that is physically labeled with a color, a textual description of that color is used to identify the Key. For example, a Key that is colored blue would be identified as "BLUE" by the text description.
	
* **Unlabeled Keys**

	For a Key that is not physically labeled in a unique manner, a textual description is used to identify the Key. This is usually based on its physical location on the device when held in its normal orientation (Landscape for tablets; Portrait for most other devices). When more than one such Key exists, they're numbered from top to bottom. For example, the top-most of two Keys used as triggers located on the left side of the device would be identified as "LEFT_TRIGGER_1" by the text description. 

>**Note:** The number and style of physical Keys varies greatly from one device to another, as do the key-press combinations that make the Keys work. **The Key identification rules above do not apply to all devices, and _in some rare cases are the opposite of those described_**.

### Standards and Deviations
Keys that are not labeled are identified by their physical location on the device when held in its normal orientation (Landscape for tablets; Portrait for most other devices). When more than one Key is present on the left side of a device, for example, the Keys can usually be identified in numerical order from top to bottom as illustrated below:

![img](../../../../../images/mx/mc40_L1L2.png)


![img](../../../../../images/mx/mc40_R1R2.png)

Naming conventions for unlabeled buttons and Keys occasionally deviate due to engineering limitations, production restrictions or other factors. This can cause confusion as to which Key is which, and increases the guesswork required for Keymapping. The most common deviations are shown below (in red lettering). Use the Key Identifiers shown for each unlabeled button when remapping on these devices: 

-----

### MC33 Key Identifiers
![img](../../../../../images/mx/mc33_key_ids.png)

-----

### MC40 Key Identifiers
![img](../../../../../images/mx/MC40_key_ids.png)

-----

### MC67 Key Identifiers
![img](../../../../../images/mx/MC67_key_ids.png)

-----

### TC51/TC56/TC56HC Key Identifiers
![img](../../../../../images/mx/tc51_key_ids.jpg)

-----

### TC70x/TC75x Key Identifiers
![img](../../../../../images/mx/tc75x_key_ids.jpg)

-----


<!-- 
notes from "Key Mapping Improvements" email thread starting on Oct. 7 
There are two different things here. There are keys names/labels (used by `remapping DSD, StageNow, EMDK, MX and the key programmer app), and then there is what actions those keys are mapped to. The problems the customer is having (correct me if I am wrong) is with the key names/labels (they don't know which key is which). This is what they use to uniquely identify the keys when they are trying to remap them. The key names/labels should adhere to the APA proposal. Top/left is 1, numbers increase as you go down and to the right. These names/labels are what we are suggesting be changed.
 
The second thing that Roger is referring to (again correct me if I am wrong) is what "action" those keys are mapped to. For legacy reasons (I have been trying to fix this but no one seems to want to budge) as Roger mentions below PTT uses KEYCODE_BUTTON_L2, scanner uses KEYCODE_BUTTON_R1, and they both share KEYCODE_BUTTON_L1 (actually this is broken in L but that is another story).
 
So the mapping should be setup as follows
 
key name/label -> Keyboard Action
"Button L1" or (LEFT_TRIGGER_1) -> "Button L2" (keycode 104) used for PTT
"Button L2" or (LEFT_TRIGGER_2) -> "Button R1" (keycode 103) used for scanning
"Button R2" or (RIGHT_TRIGGER_1) -> "Button R1" (keycode 103) used for scanning

DANNY: I can confirm that both the MC40 and MC67 do NOT comply with the naming convention for keys in the APA standard. 

MC40:
Top left key is PTT (which is L2)

MC36: top left are Vol+/- and the Scan

MC67:
Bottom Right is PTT (which is L2)

Our standard is:
L2 => PTT GC
R1 => Scan
L1 => Scan/PTT PC

B1, P1/P2/P3 are new addition, which is just different label.
-->

####Key Behavior Identifiers
Each Key Mapping specifies a single Key Behavior that should be performed for a single Key identified by a specified Key Identifier. The Key Behaviors that can be defined are listed below. 

* **Send Key code**

	This Key Behavior indicates that the Key pressed should produce a standard Android Key Action, but not necessarily the standard Android Key Action for the Key that was pressed. Any desired Key Code can be assigned to any Key, and the standard Android Key Action for that Key Code will be performed. It's also possible to specify the Key State in which standard Android Key Action for the Key Code will be performed.

	Zebra provides unlimited flexibility to assign literally any desired standard Android Key Action to any Key when pressed in any Key State. For example, the "A" Key can be assigned to perform like the "Shift" Key State and produce the standard Android Key Action normally performed by the "2" Key when pressed in the "Unshifted" Key State. 
	
* **Send trigger**

	This Key Behavior indicates that the Key pressed should produce the effect of a physical trigger switch. Most devices have one or more "Trigger" Keys for which this is the Default Key Behavior. Such Keys are most often used to initiate Barcode Scanning, but can be used for anything if the right configuration is applied.

	A fixed set of eight (8) Triggers is supported, and are designated as Trigger 1 through Trigger 8. Triggers are most commonly used to provide a low-latency notification so that high priority events can be initiated. Some System applications on a device may register to be notified when various Triggers are sent. For example, the Scanning Subsystem on most devices uses Trigger 1 to initiate Barcode Scanning.

	Normal (non-System) applications cannot perform registration for Triggers, and therefore cannot use the "Send trigger" Key Behavior to invoke their application functionality. Such applications should use the "Launch application or "Send Intent" Key Behaviors instead. However, the KeyMappingMgr can be used by a non-System application to determine which Key(s) pressed in which Key State(s) will produce Triggers for which System applications have been registered.
	
* **Launch application**

	This Key Behavior indicates that the Key pressed should launch an application of a specific name as if that application was launched by a device user using its main launcher icon. The same result could be achieved using the "Send Intent" Key Behavior, provided the right information about the Intent required to launch the application is known in advance. The "Launch application" Key Behavior makes launching an application much easier, but only to launch its main activity. If the need is to launch some other app activity or pass custom data to the application to tell it what to do, the "Send Intent" Key Behavior should be used instead.
	
* **Send Intent**

	This Key Behavior indicates that the Key pressed should send an Intent, which can be sent to an application using startActivity or sendBroadcast. Supporting both types of Intents provides the flexibility to launch a variety of applications. In addition, various parameters can be configured for constructing the Intent to match it to the needs of an application. This includes attachment of an extra data value to communicate information about a desired action the application should perform.

	Since Intents are extremely flexible, an existing application might require an Intent that cannot be described with the relatively simplistic capabilities of the KeyMappingMgr. While it may be possible to meet the needs of some existing applications, the "Send Intent" Key Behavior is really designed to send Intents that are specifically designed and added to applications for this purpose.
	
* **Suppress key**

	This Key Behavior indicates that the key-press should be completely ignored and produce no result.
	
* **Reset to default**

	This Key Behavior indicates that the Default Key Mapping (if any) for a Key in a specified Key Mapping Table should be restored. This is done by removing any Override Key Mapping for the Key from the specified Key Mapping Table. If there is no Override Key Mapping for the Key in the specified Key Mapping Table, no change will be made.

>**On Android, modifier keys are referred to as Meta keys**. 

