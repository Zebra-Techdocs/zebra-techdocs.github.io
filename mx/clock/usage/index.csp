
**Date and Time values given to the Clock must be represented as UTC**. This ensures an accurate result when calculating the local date and time for the device based on offsets for Time Zone and Daylight Saving Time, if any. If local time is used as a starting point, the order in which the Date, Time, and Time Zone are set could effect the resulting values. The examples below explain how to make these calculations correctly. 

UTC is the equivalent of LTC at the Prime Meridian in Greenwich, England, where no offsets apply. For most other places, LTC is calculated starting with the UTC and adding or subtracting time based on the Time Zone in which the device being used, plus or minus the Daylight Saving Time offset, if any.

For more information, refer to these reference sites: 
* [Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
* [Daylight Saving Time Calculator](http://www.timeanddate.com/time/change/usa/new-york?year=2017)

###Example #1
This example inverts the UTC offset. Since UTC time is _later_ than Eastern time, hours are added to the desired Eastern time to calculate its UTC equivalent. When this figure is put into the device, the Clock will recalculate the value to arrive at the desired local time for display and program use.  

&#49;. Note the desired local time for the device:

* Device Location = New York, New York, USA
* Date = January 15, 2010
* Time = 2:15 p.m. (14:15:00)

&#50;. Make the following observations about device location:

* The device is located in the Eastern USA Time Zone
* The GMT offset for that Time Zone is -5 hours (5 hours earlier than UTC)
* The Time Zone does not observe Daylight Saving Time on that Date

&#51;. Calculate the UTC value from the desired LTC:

* Apply the UTC offset (-05:00) for the selected Time Zone:
	* 14:15:00 + 05:00 = 19:15:00 (adding time because UTC is later than Eastern USA time) 
* Consider Daylight Saving Time offset (not in effect on that date):
	* Daylight Saving Time began March 14, 2010
	* Daylight Saving Time ended November 7, 2010
* Applying no Date offset, since the Time offset did not cause "roll over" or "roll under"

&#52;. The values specified to the Clock would therefore be:

* TimeZone = "America/New_York"
* Date = "2010-01-15"
* Time = "19:15:00"

When converted by the Clock, these UTC values would appear as the correct LTC values on the device.   

###Example #2
This example inverts the UTC offset. Since UTC time is _earlier_ than India time, hours are subtracted from the desired Bangalore time to calculate its UTC equivalent, which results in a (backward) cross of the Prime Meridian (dateline). When this figure is put into the device, the Clock will recalculate the value to arrive at the desired local time and day for display and program use. 

&#49;. Note the desired local time for the device:

* Device Location = Bangalore, India
* Date = July 11, 2010
* Time = 2:55 a.m. (02:55:00)

&#50;. Make the following observations about device location:

* The device is located in the India Time Zone
* The GMT offset for that Time Zone is +05:30 (+5 1/2 hours ahead of GMT)
* That Time Zone does not observe Daylight Saving Time

&#51;. Calculate the UTC value from the desired LTC:

* Apply the GMT offset (+05:30) for the selected Time Zone
	* 02:55:00 - 05:30 = 21:25:00 (rolls backward over 00:00; subtract 1 day)
* Applying no Daylight Saving Time offset
	* India does not observe Daylight Saving Time
* Applying a 1-day negative Date offset since the Time offset caused a "roll under"

&#52;. The values specified to the Clock would therefore be:

* TimeZone = "Asia/Calcutta"
* Date = "2010-07-10"
* Time = "21:25:00"

Note the Date is July 10, 2010, one day _before_ the desired local time. That is because when it's 2:55 a.m. on July 11 in India, it's 9:25 p.m. (5 1/2 hours earlier) in Greenwich, England (where UTC originates), and the date is still July 10. 

When converted by the Clock, these UTC values would appear as the correct LTC values on a device in Bangalore.